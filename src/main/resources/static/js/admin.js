document.addEventListener("DOMContentLoaded", function () {
    const tableUser = document.getElementById("tableAllUsers");
    const currentUserLogin = document.getElementById("currentUserLogin");
    const currentUserRoles = document.getElementById("currentUserRoles");
    const rolesSelect = document.getElementById("rolesNew");
    const formNewUser = document.getElementById("formNewUser");
    const editUserModal = document.getElementById("editUserModal");
    const editUserId = document.getElementById("editUserId");
    const editFirstName = document.getElementById("editFirstName");
    const editPassword = document.getElementById("editPassword");
    const editRoles = document.getElementById("editRoles");

    const apiBaseUrl = "/admin/users"; // URL API
    const apiCurrentUserUrl = "/me"; // –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const apiRolesUrl = "/admin/roles"; // URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π

    // üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    fetch(apiCurrentUserUrl, { credentials: "include" })
        .then(response => response.json())
        .then(data => {
            currentUserLogin.textContent = data.username;
            currentUserRoles.textContent = data.roles ? data.roles.join(", ") : "Unknown Role";
        })
        .catch(error => {
            currentUserLogin.textContent = "Unknown User";
            currentUserRoles.textContent = "Unknown Role";
        });

    // üìå –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    function loadUsers() {
        fetch(apiBaseUrl)
            .then(response => response.json())
            .then(data => {
                tableUser.innerHTML = data.map(user => `
                    <tr>
                        <td>${user.firstName}</td>
                        <td>${user.username}</td>
                        <td>${user.roles.join(", ")}</td>
                        <td>
<!--                            <button class="btn btn-primary btn-sm edit-user" data-id="${user.id}">Edit</button>-->
                            <button class="btn btn-danger btn-sm delete-user" data-id="${user.id}">Delete</button>
                        </td>
                    </tr>
                `).join("");

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
                document.querySelectorAll(".edit-user").forEach(button => {
                    button.addEventListener("click", () => editUser(button.dataset.id));
                });

                document.querySelectorAll(".delete-user").forEach(button => {
                    button.addEventListener("click", () => deleteUser(button.dataset.id));
                });
            })
            .catch(error => {
                console.error("Error loading users:", error);
                tableUser.innerHTML = `<tr><td colspan="5" class="text-center text-danger">Failed to load users</td></tr>`;
            });
    }

    // üìå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    formNewUser.addEventListener("submit", function (event) {
        event.preventDefault();

        const newUser = {
            firstName: document.getElementById("firstName").value,
            username: document.getElementById("username").value,
            email: document.getElementById("email").value,
            password: document.getElementById("password").value,
            roles: Array.from(rolesSelect.selectedOptions).map(option => option.value) // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        };

        fetch(apiBaseUrl, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(newUser)
        })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(errorData => {
                        throw new Error(errorData.message || "Failed to create user");
                    });
                }
                return response.json();
            })
            .then(() => {
                formNewUser.reset();
                loadUsers();
                alert("User added successfully!");
            })
            .catch(error => alert("Error adding user: " + error.message));
    });

    // üìå –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function deleteUser(userId) {
        if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã?")) return;

        fetch(`${apiBaseUrl}/${userId}`, { method: "DELETE" })
            .then(() => {
                alert("–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!");
                loadUsers();
            })
            .catch(error => alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + error));
    }


    // üìå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π
    function loadRoles() {
        fetch(apiRolesUrl)
            .then(response => response.json())
            .then(roles => {
                rolesSelect.innerHTML = `<option disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å</option>` +
                    roles.map(role => `<option value="${role.name}">${role.name}</option>`).join("");
            })
            .catch(error => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–æ–ª–µ–π:", error));
    }

    // üìå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /*function EditUser(userId) {
        fetch(`${apiBaseUrl}/${userId}`)
            .then(response => response.json())
            .then(data => {
                editUserId.value = data.id;
                editFirstName.value = data.firstName;
                editPassword.value = "";
                loadEditRoles(data.roles);
                new bootstrap.Modal(document.getElementById("editUserModal")).show();
            })
            .catch(error => console.error("Error fetching user:", error));
    }

    function loadEditRoles(selectedRoles = []) {
        fetch(apiRolesUrl)
            .then(response => response.json())
            .then(roles => {
                editRoles.innerHTML = roles.map(role => `
                    <option value="${role.name}" ${selectedRoles.includes(role.name) ? "selected" : ""}>
                        ${role.name}
                    </option>
                `).join("");
            })
            .catch(error => console.error("Error loading roles:", error));
    }

    editUserModal.addEventListener("submit", function (event) {
        event.preventDefault();

        const updatedUser = {
            firstName: editFirstName.value,
            password: editPassword.value || null,
            roles: Array.from(editRoles.selectedOptions).map(option => option.value)
        };

        fetch(`${apiBaseUrl}/${editUserId.value}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(updatedUser)
        })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(errorData => {
                        throw new Error(errorData.message || "Failed to update user");
                    });
                }
                return response.json();
            })
            .then(() => {
                loadUsers();
                alert("User updated successfully!");
                bootstrap.Modal.getInstance(document.getElementById("editUserModal")).hide();
            })
            .catch(error => alert("Error updating user: " + error.message));
    });*/

    function showLoading() {
        document.getElementById("loadingIndicator").style.display = "block";
    }

    function hideLoading() {
        document.getElementById("loadingIndicator").style.display = "none";
    }


    loadRoles(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    loadUsers(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
});
